{"version":3,"sources":["Components/TodoItem.js","Components/TodoList.js","Components/App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","react_default","a","createElement","className","completed","type","checked","onClick","completeTodo","title","handleDeleteTodo","TodoList","todos","map","todo","id","App","state","InitialTodoList","handleDeleteCompletedTodos","event","newTodos","_this","filter","setState","todoIdThatWasClicked","handleCompletedTodo","idUserClicked","addNewTodo","slice","keyCode","newTodo","userId","Math","floor","random","target","value","push","_this2","this","placeholder","autoFocus","onKeyDown","Route","exact","path","render","Link","to","Component","Boolean","window","location","hostname","match","ReactDOM","BrowserRouter","Components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.88135ea2.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function TodoItem(props) {\n  return (\n    <li className={props.completed ? \"completed\" : \"\"}>\n      <div className=\"view\">\n        <input\n          className=\"toggle\"\n          type=\"checkbox\"\n          checked={props.completed}\n          onClick={props.completeTodo}\n        />\n        <label>{props.title}</label>\n        <button className=\"destroy\" onClick={props.handleDeleteTodo} />\n      </div>\n    </li>\n  );\n}\n","import React from \"react\";\nimport TodoItem from \"./TodoItem.js\";\n\nexport default function TodoList(props) {\n  return (\n    <ul className=\"todo-list\">\n      {props.todos.map(todo => (\n        <TodoItem\n          title={todo.title}\n          completed={todo.completed}\n          completeTodo={props.completeTodo(todo.id)}\n          handleDeleteTodo={props.handleDeleteTodo(todo.id)}\n        />\n      ))}\n    </ul>\n  );\n}\n","import React, { Component } from \"react\";\nimport { Link, Route, Switch } from \"react-router-dom\";\nimport \"../App.css\";\nimport InitialTodoList from \"../todos.json\";\nimport TodoList from \"./TodoList.js\";\n\n// class TodoList extends Component {\n//   render() {\n//     //change to function and take out props.children input parameter than\n//     return (\n//       <ul className=\"todo-list\">\n//         {this.props.todos.map(todo => (\n//           <TodoItem\n//             title={todo.title}\n//             completed={todo.completed}\n//             completeTodo={this.props.completeTodo(todo.id)}\n//             handleDeleteTodo={this.props.handleDeleteTodo(todo.id)}\n//           />\n//         ))}\n//       </ul>\n//     );\n//   }\n// }\n\nclass App extends Component {\n  state = { todos: InitialTodoList };\n\n  handleDeleteCompletedTodos = event => {\n    const newTodos = this.state.todos.filter(todo => {\n      if (todo.completed === true) {\n        return false;\n      }\n      return true;\n    });\n    this.setState({\n      todos: newTodos\n    });\n  };\n\n  handleDeleteTodo = todoIdThatWasClicked => event => {\n    const newTodos = this.state.todos.filter(todo => {\n      if (todo.id === todoIdThatWasClicked) {\n        return false;\n      }\n      return true;\n      //look for matched id todoIdThatWasClicked = todo.id\n    });\n    this.setState({\n      todos: newTodos\n    });\n  };\n\n  handleCompletedTodo = idUserClicked => event => {\n    const newTodos = this.state.todos.map(todo => {\n      if (todo.id === idUserClicked) {\n        todo.completed = !todo.completed;\n      }\n      return todo;\n    });\n\n    this.setState({\n      todos: newTodos\n    });\n  };\n\n  addNewTodo = event => {\n    const newTodos = this.state.todos.slice(0);\n    if (event.keyCode === 13) {\n      const newTodo = {\n        userId: 1,\n        id: Math.floor(Math.random() * 314) + 1,\n        title: event.target.value,\n        completed: false\n      };\n      newTodos.push(newTodo);\n      this.setState({\n        todos: newTodos\n      });\n      event.target.value = \"\";\n    }\n  };\n\n  render() {\n    return (\n      // <Switch>\n      //   <Route exact path=\"/\" Component={TodoList}/>\n      //   <Route exact path=\"/active\" />\n      //   <Route exact path=\"/complete\" />\n      //   render{props => <TodoList (...props) (...commonprops) filter=classname }\n      // </Switch>\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>Mike's todos</h1>\n          <input\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            autoFocus\n            onKeyDown={this.addNewTodo}\n          />\n        </header>\n        <section className=\"main\">\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <TodoList\n                todos={this.state.todos}\n                completeTodo={this.handleCompletedTodo}\n                handleDeleteTodo={this.handleDeleteTodo}\n              />\n            )}\n          />\n        </section>\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            <strong>0</strong> item(s) left\n          </span>\n          <ul className=\"filters\">\n            <li>\n              <Link to=\"/\">All </Link>\n              {/* needs props, event handler,  */}\n            </li>\n            <li>\n              <Link to=\"/active\"> Active </Link>\n            </li>\n            <li>\n              <Link to=\"/completed\"> Completed </Link>\n            </li>\n          </ul>\n          <button\n            className=\"clear-completed\"\n            onClick={this.handleDeleteCompletedTodos}\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\nexport default App;\n\n/* <Route path=\"#/active\" Render={() => <TodoList todos={this.state.todos.filter(todo => {\n  if (todo.completed === false)\n  return todo;\n  })}\n />\n}\n  <Route path=\"/completed\" Component={TodoList} /> */\n\n//create const commonprops object with event handlers to pass into the Routes = {value, onComplete= this.handleComplete, and so on}\n\n// handleComplete = identify by ID = evt => this.setState({value: })\n// handleComplete = identify by ID = () => this.setState({value: evt.target.value})\n\n// count filter by .length\n\n// ternary classname using this.props.completed ? completed : all\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./Components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}